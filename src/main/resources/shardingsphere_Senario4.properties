########################################################################################
########## 这是做公共表的配置, 对于公共表，会多个数据源同时增加，或者删除同样的 entity row

########################################################################################

# 这个例子是做水平分库，要两个数据源

# 用一个 entity 对应两张表
spring.main.allow-bean-definition-overriding=true

# 给数据源起名字，随便起
spring.shardingsphere.datasource.names=edu1, edu2, edu3

##########################################################################################

spring.shardingsphere.datasource.edu1.type=org.apache.commons.dbcp2.BasicDataSource
spring.shardingsphere.datasource.edu1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.edu1.url=jdbc:mysql://localhost:3306/edu_db_1?useUnicode=true&characterEncoding=utf-8&allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC
spring.shardingsphere.datasource.edu1.username=vincent
spring.shardingsphere.datasource.edu1.password=1q2w3e4R

spring.shardingsphere.datasource.edu2.type=org.apache.commons.dbcp2.BasicDataSource
spring.shardingsphere.datasource.edu2.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.edu2.url=jdbc:mysql://localhost:3306/edu_db_2?useUnicode=true&characterEncoding=utf-8&allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC
spring.shardingsphere.datasource.edu2.username=vincent
spring.shardingsphere.datasource.edu2.password=1q2w3e4R

spring.shardingsphere.datasource.edu3.type=org.apache.commons.dbcp2.BasicDataSource
spring.shardingsphere.datasource.edu3.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.edu3.url=jdbc:mysql://localhost:3306/user_db?useUnicode=true&characterEncoding=utf-8&allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC
spring.shardingsphere.datasource.edu3.username=vincent
spring.shardingsphere.datasource.edu3.password=1q2w3e4R

#####################################################################################################################
spring.shardingsphere.sharding.tables.t_user.actual-data-nodes=edu$->{3}.t_user

spring.shardingsphere.sharding.tables.t_user.key-generator.column=user_id
spring.shardingsphere.sharding.tables.t_user.key-generator.type=SNOWFLAKE

spring.shardingsphere.sharding.tables.t_user.table-strategy.inline.sharding-column=user_id
spring.shardingsphere.sharding.tables.t_user.table-strategy.inline.algorithm-expression=t_user
#####################################################################################################################

# 配置公共表
spring.shardingsphere.sharding.broadcast-tables=t_udic
spring.shardingsphere.sharding.tables.t_udic.key-generator.column=dictid
spring.shardingsphere.sharding.tables.t_udic.key-generator.type=SNOWFLAKE

# 指定数据库分布情况，数据库里面表分布情况
# edu1 和 edu2, 分别有 course_1 和 course_2
spring.shardingsphere.sharding.tables.course.actual-data-nodes=edu$->{1..2}.course_$->{1..2}

# 指定 course 表的主键生成策略, SNOWFLAKE 叫雪花算法，就是生成随机
spring.shardingsphere.sharding.tables.course.key-generator.column=cid
spring.shardingsphere.sharding.tables.course.key-generator.type=SNOWFLAKE

# 指定 table 的策略
# 例如，约定 cid 的值是偶数，那么添加到 course_1 的表, 如果 cid 的值是奇数，那么添加到 course_2
spring.shardingsphere.sharding.tables.course.table-strategy.inline.sharding-column=cid
spring.shardingsphere.sharding.tables.course.table-strategy.inline.algorithm-expression=edu$->{cid % 2 + 1}

# 指定 database 的策略, 这里是专用于 course 表
spring.shardingsphere.sharding.tables.course.database-strategy.inline..sharding-column=user_id
spring.shardingsphere.sharding.tables.course.database-strategy.inline.algorithm-expression=edu$->{user_id % 2 + 1}

# 打开 SQL 的输出日志
spring.shardingsphere.props.sql.show=true
